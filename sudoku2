/* Description: Sudoku is a number-placement puzzle. 
The objective is to fill a 9 × 9 grid with numbers in such a way that each column, each row, and each of the nine 3 × 3 
sub-grids that compose the grid all contain all of the numbers from 1 to 9 one time.

Implement an algorithm that will check whether the given grid of numbers represents a 
valid Sudoku puzzle according to the layout rules described above. 
Note that the puzzle represented by grid does not have to be solvable.  */


function solution(grid) {
// take #1 - Incomplete
	/* for(let col = 0; col<grid.length;col++){
	  let column = []
	  column.push(grid[col][])
	  if(column !== new Set(...column)) return false
	}
	
	for(let row = col; row<grid.length;row++){
	    
	  } */


	const map = {}

	for(let i = 0; i<9; i++){

		for(let j = 0; j<9;j++){

			let curr = grid[i][j]
			if(curr === '.') continue

			let subGrid = Math.floor(i/3)+'.'+Math.floor(j/3)

			map['row'+i] = map['row'+i] || {}
			map['col'+j] = map['col'+j] || {}
			map[subGrid] = map[subGrid] || {}

			if(map['row'+i][curr] || map['col'+j][curr] || map[subGrid][curr]) return false


		map['row'+i][curr] = true
		map['col'+j][curr]=true
		map[subGrid][curr]=true

		}
	}
return true
}

// test cases:
console.log(solution([['.', '.', '.', '1', '4', '.', '.', '2', '.'],
        ['.', '.', '6', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '1', '.', '.', '.', '.', '.', '.'],
        ['.', '6', '7', '.', '.', '.', '.', '.', '9'],
        ['.', '.', '.', '.', '.', '.', '8', '1', '.'],
        ['.', '3', '.', '.', '.', '.', '.', '.', '6'],
        ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
        ['.', '.', '.', '5', '.', '.', '.', '7', '.']]))  // TRUE

console.log(solution([['.', '.', '.', '.', '2', '.', '.', '9', '.'],
        ['.', '.', '.', '.', '6', '.', '.', '.', '.'],
        ['7', '1', '.', '.', '7', '5', '.', '.', '.'],
        ['.', '7', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '8', '3', '.', '.', '.'],
        ['.', '.', '8', '.', '.', '7', '.', '6', '.'],
        ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
        ['.', '1', '.', '2', '.', '.', '.', '.', '.'],
        ['.', '2', '.', '.', '3', '.', '.', '.', '.']])) // FALSE